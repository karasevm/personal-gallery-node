/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-restricted-globals */
/// <reference lib="webworker" />

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst, Strategy } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/;
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`),
);

registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.includes('/api/thumbnails/'),
  new CacheFirst({
    cacheName: 'thumbnails',
    plugins: [
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

registerRoute(
  ({ url }) => /^\/\w+\.(mp4|webm|png|webp|gif|avif|jpeg|jpg)/gm.test(url.pathname),
  new CacheFirst({
    cacheName: 'fulls',
    plugins: [
      new ExpirationPlugin({ maxEntries: 30 }),
    ],
  }),
);

registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.json'),
  new CacheFirst({
    cacheName: 'json',
  }),
);

registerRoute(
  ({ url }) => url.origin === self.location.origin && (url.pathname.includes('/api/images') || url.pathname.includes('/api/meta')),
  new NetworkFirst({
    cacheName: 'imageData',
  }),
);

class MyStrategy extends Strategy {
  // eslint-disable-next-line class-methods-use-this
  async _handle(request: any, handler: { fetch: (arg0: any) => any; }) {
    if (request.mode === 'navigate') {
      await handler.fetch(request);
      return Response.redirect('/', 302);
    }
    return handler.fetch(request);
  }
}

registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.includes('/api/images'),
  new MyStrategy(),
  'POST',
);
// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
